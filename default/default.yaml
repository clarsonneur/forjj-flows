---
# This Flow describes what forjj will need to do with plugins
title: "Basic GIT flow with one GIT upstream remote"
define: # Collection of plugin types
  upstream:
    # roles: # Array of upstream role name to assign to each upstream instances. by default, the role is upstream.
    # - "upstream"
    max_instances: 1 # Max number of upstream services a repo configured in Pull Request flow can accept.
  ci:
    max_instances: 1 # Max number of ci services a repo configured in Pull Request flow can accept.
flow:
  create: # Actions to do to create flow elements. Assume local git repo exist connected to the upstream repo.
  - instance: ["upstream", "ci_update"]
  - instance: ["ci", "create_webhook"]
  - instance: ["ci", "create_jobs"]
  start: # Actions to do to start a new work (forjj create or update)
  - git: ["checkout", "-b", "{{ .Branch }}"]
  - git: ["push", "-u", "origin", "{{ .Branch }}"]
  close: # Actions to do to close a forjj task.
  - git: ["push"]
  - git: ["checkout", "master"]
  - git: ["branch", "-D", "{{ .Branch }}"]
  maintain: # Action to do to
  - git: ["checkout", "master"]
  - git: ["reset", "--hard", "HEAD"]
  - git: ["clean"]
  - git: ["pull"]

on-repo-do: # On top of loaded Forjfile for a specific Repo given by Forjj:
  # ----------------
  jenkins-update-for-github: # update the list of features
    description: Set jenkins features for Github
    # Set if we found the repo attached to an upstream/github and attached to a ci/jenkins
    if:
      - rule: '{{ if .Current.HasApps "driver:github"  }}true{{ end }}'
      - rule: '{{ if .Current.HasApps "driver:jenkins" }}true{{ end }}'
    set: # Set object features with: map[string]map[string]<string|[]string>
      features:
        plugin:github:1.18.2: {}
        feature:ghprb : {}

  # ----------------
  create-github-webhook-to-jenkins:
    description: Define the jenkins webhook
    if:
      - rule: '{{ if .Current.HasApps "driver:github"  }}true{{ end }}'
      - rule: '"{{ if .Current.HasApps "driver:jenkins" }}true{{ end }}"'
    loop-on-list:
      - name: jenkins
        list: GetApps
        parameters:
          - "driver:jenkins"
      - name: github
        list: GetApps
        parameters:
          - "driver:github"
    set:
      webhooks: # set a webhook in loaded Forjfile to jenkins server
        "{{ .List.jenkins.Name }}-{{ .List.github.Name }}":
          url: 'http{{ if .List.jenkins.SslCertificate }}s{{end}}://{{ .List.jenkins.DeployServiceAddr }}{{ if .List.jenkins.DeployServicePort }}:{{.List.jenkins.DeployServicePort}}{{ end }}/github-webhook/'
          events: pull_request,push
          repos: |
            {{ $HOOK := .List.jenkins.Name + "-" + .List.github.Name }}\
            {{ if .Forjfile.Webhooks.$HOOK.Repos }}{{.Forjfile.Webhooks.$HOOK.Repos}},{{ .Current.Name }}\
            {{ else }}\
            {{ .Current.Name }}\
            {{ end }}
          app: '{{ .List.github.Name }}'

  # ----------------
  create-seedjobs:
    description: Set project
    if_each: # if_each will test each and execute the `set` for each object instances.
      filter: |
        {{ if .Current.repos.Apps.upstream.Driver "github" }}\
        {{ $CI := Range .Current.repos.Apps.ci }}{{ if $CI.Driver "jenkins")) }}\
        found
        {{ end }}{{ end }}\
    set: # map[string]map[string]<string|[]string>
      projects:
        '{{ .Current.Name }}':
          remote-type:       '{{ .Current.RemoteType }}'
          github-api-url:    '{{ .Current.UpstreamAPIUrl }}'
          github-repo-owner: '{{ .Current.Owner }}'
          github-repo:       '{{ .Current.Name }}'
