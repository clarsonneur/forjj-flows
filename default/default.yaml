---
# This Flow describes what forjj will need to do with plugins
title: "Basic GIT flow with one GIT upstream remote"
define: # Collection of plugin types
  upstream:
    # roles: # Array of upstream role name to assign to each upstream instances. by default, the role is upstream.
    # - "upstream"
    max_instances: 1 # Max number of upstream services a repo configured in Pull Request flow can accept.
  ci:
    max_instances: 1 # Max number of ci services a repo configured in Pull Request flow can accept.
flow:
  create: # Actions to do to create flow elements. Assume local git repo exist connected to the upstream repo.
  - instance: ["upstream", "ci_update"]
  - instance: ["ci", "create_webhook"]
  - instance: ["ci", "create_jobs"]
  start: # Actions to do to start a new work (forjj create or update)
  - git: ["checkout", "-b", "{{ .Branch }}"]
  - git: ["push", "-u", "origin", "{{ .Branch }}"]
  close: # Actions to do to close a forjj task.
  - git: ["push"]
  - git: ["checkout", "master"]
  - git: ["branch", "-D", "{{ .Branch }}"]
  maintain: # Action to do to
  - git: ["checkout", "master"]
  - git: ["reset", "--hard", "HEAD"]
  - git: ["clean"]
  - git: ["pull"]

apps: # Collection of Role/PluginType that is used to apply flow task.
  upstream:
    github: # If this app is attached to the repo. do the following: Forjj has set the template context to get github and apps information.
      ci_update:
        commit: "Add github features to jenkins {{ .Apps.Jenkins.Name }}"
        do:
        - apps:
            ci/jenkins: # If the CI instance is jenkins, forjj will communicate with forjj jenkins plugin API to do the following:
              action: "add_features"
              features:
              - "plugin:github:1.18.2"
              - "feature:ghprb"
  ci: # If this app is attached to the repo. do the following: Forjj has set the template context to get jenkins and apps information.
    jenkins:
      create_webhook:
        commit: "Create Github webhook to the jenkins instance."
        do:
        - apps:
            upstream/github: # Communicate with this plugin having role 'upstream' and send following as payload.
              action: "webhook"
              url: "{{ .App.JenkinsProto}}://{{ .App.JenkinsAddr }}{{ if .App.JenkinsPort}}:{{.App.JenkinsPort}}{{ end }}/"
      create_jobs:
        commit: "Create Pull Request jenkins jobs through groovy jobdsl"
        do:
        - api:
            action: "job"
            name: "{{ .Repo.Name }}_PR"
            file: "{{ .App.JobsPath }}/{{ .Repo.Name }}/pull_request.groovy"
            template: "templates/PR/pull_request.groovy" # The template is copied to the infra repo and then used.
        - api:
            action: "job"
            name: "{{ .Repo.Name }}_Release"
            file: "{{ .App.JobsPath }}/{{ .Repo.Name }}/release.groovy"
            template: "templates/PR/release.groovy"
