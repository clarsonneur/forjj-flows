---
# This Flow describes what forjj will need to do with plugins
title: "Basic GIT flow with one GIT upstream remote"
define: # Collection of plugin types
  upstream:
    # roles: # Array of upstream role name to assign to each upstream instances. by default, the role is upstream.
    # - "upstream"
    max_instances: 1 # Max number of upstream services a repo configured in Pull Request flow can accept.
  ci:
    max_instances: 1 # Max number of ci services a repo configured in Pull Request flow can accept.
flow:
  create: # Actions to do to create flow elements. Assume local git repo exist connected to the upstream repo.
  - instance: ["upstream", "ci_update"]
  - instance: ["ci", "create_webhook"]
  - instance: ["ci", "create_jobs"]
  start: # Actions to do to start a new work (forjj create or update)
  - git: ["checkout", "-b", "{{ .Branch }}"]
  - git: ["push", "-u", "origin", "{{ .Branch }}"]
  close: # Actions to do to close a forjj task.
  - git: ["push"]
  - git: ["checkout", "master"]
  - git: ["branch", "-D", "{{ .Branch }}"]
  maintain: # Action to do to
  - git: ["checkout", "master"]
  - git: ["reset", "--hard", "HEAD"]
  - git: ["clean"]
  - git: ["pull"]

on-forjfile-do: # On top of loaded Forjfile (.Repo is not set)
  # ----------------
  set-default-ci:
    description: "Set 'jenkins' application name as default for all repositories"
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" "name:jenkins" }}true{{ end }}'
    set:
      forj-settings:
        default-repo-apps:
          ci: jenkins

  # ----------------
  jenkins-update-for-github: # update the list of features
    description: Set jenkins features for Github
    # Set if we found the repo attached to an upstream/github and attached to a ci/jenkins
    if:
      - rule: '{{ if .Forjfile.HasApps "driver:github"  }}true{{ end }}'
      - rule: '{{ if .Forjfile.HasApps "driver:jenkins" }}true{{ end }}'
    set: # Set object features with: map[string]map[string]<string|[]string>
      features:
        plugin:github:1.18.2: {}
        feature:ghprb : {}

on-repo-do: # On top of loaded Forjfile for a specific Repo given by Forjj:
  # ----------------
  create-github-webhook-to-jenkins:
    description: Define the jenkins webhook
    if:
      - rule: '{{ if .Repo.HasApps "driver:github"  }}true{{ end }}'
      - rule: '{{ if .Repo.HasApps "driver:jenkins" }}true{{ end }}'
      - rule: '{{ if or (eq (.Repo.Get "role") "code") (and (not (eq (.Repo.Get "role") "code")) (eq (.Forjfile.Application.Get "pro-deployment") "true")) }}true{{ end }}'
    loop-on-list:
      - name: jenkins
        list: GetApps
        parameters:
          - "driver:jenkins"
      - name: github
        list: GetApps
        parameters:
          - "driver:github"
    set:
      webhooks: # set a webhook in loaded Forjfile to jenkins server
        '{{ .List.jenkins.Get "name" }}-{{ .List.github.Get "name" }}':
          url: |
            {{/* Protocol setup         */}}http{{ if not (eq (.List.jenkins.Get "ssl-method") "none") }}s{{end}}://\
            {{/* ServerName setup       */}}{{ .List.jenkins.Get "deploy-service-addr" }}\
            {{ $PORT := (.List.jenkins.Get "deploy-service-port") }}\
            {{ if eq (.List.jenkins.Get "ssl-method") "none" }}\
            {{/* http ServerPort setup  */}}{{ if (and (not (eq $PORT "80")) $PORT)  }}:{{ $PORT }}{{ end }}\
            {{ else }}\
            {{/* https ServerPort setup */}}{{ if (and (not (eq $PORT "443")) $PORT) }}:{{ $PORT }}{{ end }}\
            {{ end }}\
            /github-webhook/\
          events: pull_request,push
          repos: |
            {{ $HOOK := (concatenate (.List.jenkins.Get "name") "-" (.List.github.Get "name")) }}\
            {{ $EXISTING_REPOS := .Forjfile.Get "webhooks" $HOOK "repos" }}\
            {{ if $EXISTING_REPOS }}\
            {{    $EXISTING_REPOS }},{{ .Repo.Get "name" }}\
            {{ else }}\
            {{    .Repo.Get "name" }}\
            {{ end }}\
          app: '{{ .List.github.Get "name" }}'

  # ----------------
  create-seedjobs:
    description: Set project
    if: # if_each will test each and execute the `set` for each object instances.
      - rule: '{{ if .Repo.HasApps "driver:github" }}true{{ end }}'
      - rule: '{{ if or (not (eq .Repo.Role "deploy")) .Repo.IsCurrentDeploy }}true{{ end }}'
    set:
      projects:
        '{{ .Repo.Get "name" }}': {}
